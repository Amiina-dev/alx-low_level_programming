!<arch>
0-isupper.c/    0           0     0     644     166       `
#include "main.h"

/**
 * _isupper - check the code for Holberton School students.
 * @c: int
 * Return: 0
 */

int _isupper(int c)
{
	return (c >= 65 && c <= 90);
}
0-memset.c/     0           0     0     644     226       `
#include "main.h"

/**
 * _memset - memset
 * @s: pointer
 * @b:data
 * @n: index
 * Return: *s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     338       `
#include "main.h"

/**
 * _strcat - function commute srtings
 * @dest: dstnation
 * @src: source
 * Return: return value
 */

char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}

	while (src[j] != '\0')
	{
		dest[i] = src[j];
		j++;
		i++;
	}
	dest[i] = '\0';

	return (dest);
}
100-atoi.c/     0           0     0     644     385       `
#include "main.h"

/**
 * _atoi - int
 * @s: pointer
 * Return: int
 */

int _atoi(char *s)
{
	int i;
	int res = 0;
	int sig = -1;
	int brk = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
			sig = sig * -1;
		if (s[i] >= '0' && s[i] <= '9')
		{
			res = res * 10;
			res -= (s[i] - '0');
			brk = 1;
		}
		else if (brk == 1)
			break;
	}
	res = sig * res;
	return (res);
}

1-isdigit.c/    0           0     0     644     148       `
#include "main.h"

/**
 * _isdigit - check the code for students
 * @c: int
 * Return: 0
 */

int _isdigit(int c)
{
	return (c >= 48 && c <= 57);
}
1-memcpy.c/     0           0     0     644     257       `
#include "main.h"

/**
 * _memcpy - memcpy
 * @dest: destination
 * @src: source
 * @n: size
 * Return: *dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     385       `
#include "main.h"

/**
 * _strncat - two words
 * @dest: destination
 * @src: source
 * @n: int
 * Return: *dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int m;
	int i;

	m = 0;

	for (i = 0; i < 1000; i++)
	{
		if (dest[i] == '\0')
		{
			break;
		}
		m++;
	}
	for (i = 0; src[i] != '\0' && i < n; i++)
	{
		dest[m + i] = src[i];
	}
	dest[m + i] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     236       `
#include "main.h"

/**
 * _strchr - prints found c
 * @s: pointer
 * @c: char
 * Return: *s
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
	}
	return (0);
}
2-strlen.c/     0           0     0     644     182       `
#include "main.h"

/**
 * _strlen - length of a string
 * @s: input
 * Return: lenght
 */

int _strlen(char *s)
{
	int l = 0;

	while (*s != '\0')
	{
		s++;
		l++;
	}
	return (l);
}
2-strncpy.c/    0           0     0     644     328       `
#include "main.h"

/**
 * _strncpy - two words
 * @dest: destination pointer
 * @src: source pointer
 * @n: parameter
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; src[i] != '\0' && i < n; i++)
	{
		dest[i] = src[i];
	}

	for ( ; i < n; i++)
	{
		dest[i] = '\0';
	}
	return (dest);
}
3-islower.c/    0           0     0     644     193       `
#include "main.h"

/**
 * _islower - check the code for lower case letters
 * @c: parameter
 * Return: 0
 */

int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	return (0);
}

3-puts.c/       0           0     0     644     188       `
#include "main.h"

/**
 * _puts - prints string
 * @str: string
 * Return: no return
 */

void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     288       `
#include "main.h"

/**
 * _strcmp - compare strings
 * @s1: first string
 * @s2:
 * second string
 * Return: *dest
 */

int _strcmp(char *s1, char *s2)
{
	int i;
	int R;

	i = 0;

	while (s1[i] == s2[i] && (s1[i] != '\0' || s2[i] != '\0'))
	{
		i++;
	}
	R = s1[i] - s2[i];
	return (R);
}
3-strspn.c/     0           0     0     644     403       `
#include "main.h"

/**
 * _strspn - Gets the length of a prefix substring.
 * @s: string to be checked
 * @accept: accepted chars
 * Return: length
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int c = 0;
	char *t = accept;

	while (*s++)
	{
		while (*accept++)
			if (*(s - 1) == *(accept - 1))
			{
				c++;
				break;
			}
		if (!(*--accept))
			break;
		accept = t;
	}
	return (c);
}

4-isalpha.c/    0           0     0     644     234       `
#include "main.h"

/**
 * _isalpha - check the code for alphabets
 * @c: arguement
 * Return: 0
 */

int _isalpha(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else if (c >= 65 && c <= 90)
	{
		return (1);
	}
	return (0);
}
4-strpbrk.c/    0           0     0     644     301       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - strpbrk
 * @s: pointer
 * @accept: pointer
 * Return: NULL
 */

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			for (*s == accept[i])
			{
				return (s);
			}
		}
		s++;
	}
	return (NULL);
}

5-strstr.c/     0           0     0     644     455       `
#include "main.h"

/**
 * _strstr - function locate
 * @haystack: pointer to char
 * @needle: pointer to char
 * Return: 0
 */

char *_strstr(char *haystack, char *needle)
{
	char *result = haystack, *fneedle = needle;

		while (*haystack)
		{
			while (*needle)
			{
				if (*haystack++ != *needle++)
				{
					break;
				}
			}
			if (!*needle)
			{
				return (result);
			}
			needle = fneedle;
			result++;
			haystack = result;
		}
		return (0);
}

6-abs.c/        0           0     0     644     186       `
#include "main.h"

/**
 * _abs - retrn the absolute value of a given number
 * @n: integer arguement
 * Return: 0
 */

int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	return (-n);
}
9-strcpy.c/     0           0     0     644     266       `
#include "main.h"

/**
 * _strcpy - copy strg to another string
 * @dest: destination
 * @src: source
 * Return: dest
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     175       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: char
 * Return: on success, 1, else -1
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}

